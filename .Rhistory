![Xu Strict Exogeneity Dag (Figure 2)](/post/panel_dag_files/xu_strict_exo.png){width=80%}
blogdown:::insert_image_addin()
![](/post/panel_dag_files/xu_strict_exo.png){width=80%}
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site(run_hugo=F,build_rmd="content/post/panel_dag.Rmd")
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::build_site(build_rmd = "content/post/panel_dag_new.Rmd")
blogdown::build_site(build_rmd = "content/post/panel_dag_new.Rmd")
blogdown::build_site(build_rmd = "content/post/panel_dag_new.Rmd")
blogdown::build_site(build_rmd = "content/post/panel_dag_new.Rmd")
blogdown::build_site(build_rmd = "content/post/panel_dag_new.Rmd")
blogdown::build_site(build_rmd = "content/post/panel_dag_new.Rmd")
blogdown::build_site(build_rmd = "content/post/panel_dag_new.Rmd")
cranlogs::cran_downloads("ordbetareg")
cranlogs::cran_downloads("ordbetareg",'last-week')
cranlogs::cran_downloads("ordbetareg",'last-month')
blogdown::build_site(build_rmd="content/post/energy_nationalism.Rmd")
blogdown::serve_site()
blogdown::build_site(build_rmd="content/post/limited_dvs.Rmd")
blogdown::build_site(build_rmd="content/post/limited_dvs.Rmd")
blogdown::build_site(build_rmd="content/post/limited_dvs.Rmd")
blogdown::build_site(build_rmd="content/post/limited_dvs.Rmd")
blogdown::build_site(build_rmd="content/post/limited_dvs.Rmd")
blogdown::build_site(build_rmd="content/post/limited_dvs.Rmd")
?sample
knitr::opts_chunk$set(echo = TRUE,warning=FALSE,message=FALSE,fig.align = "center")
library(tidyverse)
library(ordbetareg)
library(extraDistr)
library(vdemdata)
library(brms)
library(ggthemes)
library(gam)
library(mgcv)
library(sandwich)
# mac os X font issues
theme_tufte2 <- theme_tufte() +
theme(text=element_text(family=""))
set.seed(07012022)
N <- 7000000
stations <- 4500
sample(1:3,stations,replace=T)
sample(1:stations,5000,replace=T,
prob=sample(1:3,stations,replace=T))
sample(1:stations,N,replace=T,
prob=sample(1:3,stations,replace=T))
N <- 7000000
stations <- 4500
vote_assign <- sample(1:stations,N,replace=T,
prob=sample(1:3,stations,replace=T))
table(vote_assign)
max(table(vote_assign))
min(table(vote_assign))
t <- .1
turnout <- rbinom(n=N, size=1,prob = t)
# sample 100 random polling stations 1,000 times
sample_station <- sample(1:stations, size=100)
turn_est <- mean(turnout[vote_assign %in% sample_station])
mean(turn_est)
t
# loop over turnout, sample polls, estimate turnout
over_turnout <- parallel::mclapply(seq(.05,.5,by=.1), function(t) {
# randomly let voters decide to vote depending on true turnout rate
turnout <- rbinom(n=N, size=1,prob = t)
over_samples <- lapply(1:1000, function(i) {
# sample 100 random polling stations 1,000 times
sample_station <- sample(1:stations, size=100)
turn_est <- mean(turnout[vote_assign %in% sample_station])
})
},num.cores=10)
# loop over turnout, sample polls, estimate turnout
over_turnout <- parallel::mclapply(seq(.05,.5,by=.1), function(t) {
# randomly let voters decide to vote depending on true turnout rate
turnout <- rbinom(n=N, size=1,prob = t)
over_samples <- lapply(1:1000, function(i) {
# sample 100 random polling stations 1,000 times
sample_station <- sample(1:stations, size=100)
turn_est <- mean(turnout[vote_assign %in% sample_station])
return(tibble(mean_est=turn_est,
experiment=i))
}) %>% bind_rows %>%
mutate(Turnout=t)
over_samples
},num.cores=10)
knitr::opts_chunk$set(echo = TRUE,warning=FALSE,message=FALSE,fig.align = "center")
library(tidyverse)
library(ordbetareg)
library(extraDistr)
library(vdemdata)
library(brms)
library(ggthemes)
library(gam)
library(mgcv)
library(sandwich)
library(ggplot2)
# mac os X font issues
theme_tufte2 <- theme_tufte() +
theme(text=element_text(family=""))
set.seed(07012022)
# loop over turnout, sample polls, estimate turnout
over_turnout <- parallel::mclapply(seq(.05,.5,by=.1), function(t) {
# randomly let voters decide to vote depending on true turnout rate
turnout <- rbinom(n=N, size=1,prob = t)
over_samples <- lapply(1:1000, function(i) {
# sample 100 random polling stations 1,000 times
sample_station <- sample(1:stations, size=100)
turn_est <- mean(turnout[vote_assign %in% sample_station])
return(tibble(mean_est=turn_est,
experiment=i))
}) %>% bind_rows %>%
mutate(Turnout=t)
over_samples
},num.cores=10) %>%
bind_rows
View(over_turnout)
# loop over turnout, sample polls, estimate turnout
over_turnout <- parallel::mclapply(seq(.05,.5,by=.1), function(t) {
# randomly let voters decide to vote depending on true turnout rate
turnout <- rbinom(n=N, size=1,prob = t)
over_samples <- lapply(1:1000, function(i) {
# sample 100 random polling stations 1,000 times
sample_station <- sample(1:stations, size=100)
turn_est <- mean(turnout[vote_assign %in% sample_station])
return(tibble(mean_est=turn_est,
experiment=i))
}) %>% bind_rows %>%
mutate(Turnout=t)
over_samples
},mc.cores=10) %>%
bind_rows
hist(over_turnout$mean_est)
over_turnout %>%
ggplot(aes(y=mean_est,x=Turnout)) +
stat_summary(fun.data=mean_cl_boot) +
theme_tufte() +
theme(text=element_text(family=""))
over_turnout %>%
ggplot(aes(y=mean_est,x=Turnout)) +
stat_summary(fun.data=mean_cl_boot) +
theme_tufte() +
theme(text=element_text(family=""))
t <- .1
station_rates <- rbeta(n=N,t*20,(1-t)*20)
hist`(station_rates)`
hist(station_rates)
turnout <- sapply(1;stations, function(s) {
turnout <- sapply(1:stations, function(s) {
rbinom(n=sum(vote_assign==s), size=1,prob = station_rates[s])
})
table(turnout)
pop_turnout <- lapply(1:stations, function(s) {
tibble(turnout=rbinom(n=sum(vote_assign==s), size=1,prob = station_rates[s]),
station=s)
}) %>% bind_rows
# loop over turnout, sample polls, estimate turnout
over_turnout <- parallel::mclapply(seq(.05,.5,by=.1), function(t) {
# polling station varying turnout rates
station_rates <- rbeta(n=N,t*20,(1-t)*20)
# randomly let voters decide to vote depending on true station-level turnout rate
pop_turnout <- lapply(1:stations, function(s) {
tibble(turnout=rbinom(n=sum(vote_assign==s), size=1,prob =
station_rates[s]),
station=s)
}) %>% bind_rows
over_samples <- lapply(1:1000, function(i) {
# sample 100 random polling stations 1,000 times
sample_station <- sample(1:stations, size=100)
turn_est <- mean(pop_turnout$turnout[pop_turnout$station %in% sample_station])
return(tibble(mean_est=turn_est,
experiment=i))
}) %>% bind_rows %>%
mutate(Turnout=t)
over_samples
},mc.cores=10) %>%
bind_rows
over_turnout %>%
ggplot(aes(y=mean_est,x=Turnout)) +
stat_summary(fun.data=mean_cl_boot) +
theme_tufte() +
theme(text=element_text(family=""))
View(over_turnout)
# loop over turnout, sample polls, estimate turnout
over_turnout <- parallel::mclapply(seq(.05,.5,by=.1), function(t) {
# polling station varying turnout rates
station_rates <- rbeta(n=N,t*20,(1-t)*20)
# randomly let voters decide to vote depending on true station-level turnout rate
pop_turnout <- lapply(1:stations, function(s) {
tibble(turnout=rbinom(n=sum(vote_assign==s), size=1,prob =
station_rates[s]),
station=s)
}) %>% bind_rows
over_samples <- lapply(1:1000, function(i) {
# sample 100 random polling stations 1,000 times
sample_station <- sample(1:stations, size=50)
turn_est <- mean(pop_turnout$turnout[pop_turnout$station %in% sample_station])
return(tibble(mean_est=turn_est,
experiment=i))
}) %>% bind_rows %>%
mutate(Turnout=t)
over_samples
},mc.cores=10) %>%
bind_rows
over_turnout %>%
ggplot(aes(y=mean_est,x=Turnout)) +
stat_summary(fun.data=mean_cl_boot) +
geom_abline(slope=1,intercept=0,linetype=2,colour="red") +
theme_tufte() +
theme(text=element_text(family="")) +
labs(y="Estimated Turnout",x="True Turnout",
caption=stringr::str_wrap("Comparison of Mourakiboun estimated (y axis) versus actual turnout (x axis). Red line shows where true and estimated values are equal. Based on random samples of 50 polling stations and assuming no problems with recording votes.")) +
scale_x_continuous(labels=scales::percent_format) +
scale_y_continuous(labels=scales::percent_format)
over_turnout %>%
ggplot(aes(y=mean_est,x=Turnout)) +
stat_summary(fun.data=mean_cl_boot) +
geom_abline(slope=1,intercept=0,linetype=2,colour="red") +
theme_tufte() +
theme(text=element_text(family="")) +
labs(y="Estimated Turnout",x="True Turnout",
caption=stringr::str_wrap("Comparison of Mourakiboun estimated (y axis) versus actual turnout (x axis). Red line shows where true and estimated values are equal. Based on random samples of 50 polling stations and assuming no problems with recording votes."))
View(over_turnout)
over_turnout %>%
ggplot(aes(y=Turnout,x=mean_est)) +
stat_summary(fun.data=mean_cl_boot) +
geom_abline(slope=1,intercept=0,linetype=2,colour="red") +
theme_tufte() +
theme(text=element_text(family="")) +
labs(y="Estimated Turnout",x="True Turnout",
caption=stringr::str_wrap("Comparison of Mourakiboun estimated (y axis) versus actual turnout (x axis). Red line shows where true and estimated values are equal. Based on random samples of 50 polling stations and assuming no problems with recording votes."))
over_turnout %>%
ggplot(aes(y=mean_est,x=Turnout)) +
stat_summary(fun.data=mean_cl_normal) +
geom_abline(slope=1,intercept=0,linetype=2,colour="red") +
theme_tufte() +
theme(text=element_text(family="")) +
labs(y="Estimated Turnout",x="True Turnout",
caption=stringr::str_wrap("Comparison of Mourakiboun estimated (y axis) versus actual turnout (x axis). Red line shows where true and estimated values are equal. Based on random samples of 50 polling stations and assuming no problems with recording votes."))
?stat_summary
over_turnout %>%
group_by(Turnout) %>%
summarize(mean_est=mean(mean_est),
low_est=quantile(mean_est,.05),
high_est=quantile(mean_est, .95)) %>%
ggplot(aes(y=mean_est,x=Turnout)) +
geom_pointrange(aes(ymin=low_est,
ymax=high_est)) +
geom_abline(slope=1,intercept=0,linetype=2,colour="red") +
theme_tufte() +
theme(text=element_text(family="")) +
labs(y="Estimated Turnout",x="True Turnout",
caption=stringr::str_wrap("Comparison of Mourakiboun estimated (y axis) versus actual turnout (x axis). Red line shows where true and estimated values are equal. Based on random samples of 50 polling stations and assuming no problems with recording votes."))
over_turnout %>%
group_by(Turnout) %>%
summarize(mean_est=mean(mean_est),
low_est=quantile(mean_est,.05),
high_est=quantile(mean_est, .95))
hist(over_turnout$mean_est[over_turnout$Turnout==0.05])
quantile(over_turnout$mean_est[over_turnout$Turnout==0.05])
over_turnout %>%
group_by(Turnout) %>%
summarize(pop_est=mean(mean_est),
low_est=quantile(mean_est,.05),
high_est=quantile(mean_est, .95)) %>%
ggplot(aes(y=pop_est,x=Turnout)) +
geom_pointrange(aes(ymin=low_est,
ymax=high_est)) +
geom_abline(slope=1,intercept=0,linetype=2,colour="red") +
theme_tufte() +
theme(text=element_text(family="")) +
labs(y="Estimated Turnout",x="True Turnout",
caption=stringr::str_wrap("Comparison of Mourakiboun estimated (y axis) versus actual turnout (x axis). Red line shows where true and estimated values are equal. Based on random samples of 50 polling stations and assuming no problems with recording votes."))
over_turnout %>%
group_by(Turnout) %>%
summarize(pop_est=mean(mean_est),
low_est=quantile(mean_est,.05),
high_est=quantile(mean_est, .95)) %>%
ggplot(aes(y=pop_est,x=Turnout)) +
geom_pointrange(aes(ymin=low_est,
ymax=high_est)) +
geom_abline(slope=1,intercept=0,linetype=2,colour="red") +
theme_tufte() +
theme(text=element_text(family="")) +
labs(y="Estimated Turnout",x="True Turnout",
caption=stringr::str_wrap("Comparison of Mourakiboun estimated (y axis) versus actual turnout (x axis). Red line shows where true and estimated values are equal. Based on random samples of 50 polling stations and assuming no problems with recording votes."))
over_turnout %>%
group_by(Turnout) %>%
summarize(pop_est=mean(mean_est),
low_est=quantile(mean_est,.05),
high_est=quantile(mean_est, .95)) %>%
ggplot(aes(y=pop_est,x=Turnout)) +
geom_linerange(aes(ymin=low_est,
ymax=high_est)) +
geom_abline(slope=1,intercept=0,linetype=2,colour="red") +
theme_tufte() +
theme(text=element_text(family="")) +
labs(y="Estimated Turnout",x="True Turnout",
caption=stringr::str_wrap("Comparison of Mourakiboun estimated (y axis) versus actual turnout (x axis). Red line shows where true and estimated values are equal. Based on random samples of 50 polling stations and assuming no problems with recording votes."))
over_turnout %>%
group_by(Turnout) %>%
summarize(pop_est=mean(mean_est),
low_est=quantile(mean_est,.05),
high_est=quantile(mean_est, .95)) %>%
ggplot(aes(y=pop_est,x=Turnout)) +
geom_pointrange(aes(ymin=low_est,
ymax=high_est),size=1) +
geom_abline(slope=1,intercept=0,linetype=2,colour="red") +
theme_tufte() +
theme(text=element_text(family="")) +
labs(y="Estimated Turnout",x="True Turnout",
caption=stringr::str_wrap("Comparison of Mourakiboun estimated (y axis) versus actual turnout (x axis). Red line shows where true and estimated values are equal. Based on random samples of 50 polling stations and assuming no problems with recording votes."))
over_turnout %>%
group_by(Turnout) %>%
summarize(pop_est=mean(mean_est),
low_est=quantile(mean_est,.05),
high_est=quantile(mean_est, .95)) %>%
ggplot(aes(y=pop_est,x=Turnout)) +
geom_pointrange(aes(ymin=low_est,
ymax=high_est),size=.5) +
geom_abline(slope=1,intercept=0,linetype=2,colour="red") +
theme_tufte() +
theme(text=element_text(family="")) +
labs(y="Estimated Turnout",x="True Turnout",
caption=stringr::str_wrap("Comparison of Mourakiboun estimated (y axis) versus actual turnout (x axis). Red line shows where true and estimated values are equal. Based on random samples of 50 polling stations and assuming no problems with recording votes."))
over_turnout %>%
group_by(Turnout) %>%
summarize(pop_est=mean(mean_est),
low_est=quantile(mean_est,.05),
high_est=quantile(mean_est, .95)) %>%
ggplot(aes(y=pop_est,x=Turnout)) +
geom_pointrange(aes(ymin=low_est,
ymax=high_est),size=.25) +
geom_abline(slope=1,intercept=0,linetype=2,colour="red") +
theme_tufte() +
theme(text=element_text(family="")) +
labs(y="Estimated Turnout",x="True Turnout",
caption=stringr::str_wrap("Comparison of Mourakiboun estimated (y axis) versus actual turnout (x axis). Red line shows where true and estimated values are equal. Based on random samples of 50 polling stations and assuming no problems with recording votes."))
?geom_pointrange
over_turnout %>%
group_by(Turnout) %>%
summarize(pop_est=mean(mean_est),
low_est=quantile(mean_est,.05),
high_est=quantile(mean_est, .95)) %>%
ggplot(aes(y=pop_est,x=Turnout)) +
geom_pointrange(aes(ymin=low_est,
ymax=high_est),size=.5,fatten=1) +
geom_abline(slope=1,intercept=0,linetype=2,colour="red") +
theme_tufte() +
theme(text=element_text(family="")) +
labs(y="Estimated Turnout",x="True Turnout",
caption=stringr::str_wrap("Comparison of Mourakiboun estimated (y axis) versus actual turnout (x axis). Red line shows where true and estimated values are equal. Based on random samples of 50 polling stations and assuming no problems with recording votes."))
over_turnout %>%
group_by(Turnout) %>%
summarize(pop_est=mean(mean_est),
low_est=quantile(mean_est,.05),
high_est=quantile(mean_est, .95))
# loop over turnout, sample polls, estimate turnout
over_turnout <- parallel::mclapply(seq(.05,.5,by=.1), function(t) {
# polling station varying turnout rates
station_rates <- rbeta(n=N,t*20,(1-t)*20)
# randomly let voters decide to vote depending on true station-level turnout rate
pop_turnout <- lapply(1:stations, function(s) {
tibble(turnout=rbinom(n=sum(vote_assign==s), size=1,prob =
station_rates[s]),
station=s)
}) %>% bind_rows
over_samples <- lapply(1:1000, function(i) {
# sample 100 random polling stations 1,000 times
sample_station <- sample(1:stations, size=50,prob=station_rates)
turn_est <- mean(pop_turnout$turnout[pop_turnout$station %in% sample_station])
return(tibble(mean_est=turn_est,
experiment=i))
}) %>% bind_rows %>%
mutate(Turnout=t)
over_samples
},mc.cores=10) %>%
bind_rows
rlang::last_error()
station_rates
station_rates <- rbeta(n=N,t*20,(1-t)*20)
pop_turnout <- lapply(1:stations, function(s) {
tibble(turnout=rbinom(n=sum(vote_assign==s), size=1,prob =
station_rates[s]),
station=s)
}) %>% bind_rows
over_samples <- lapply(1:1000, function(i) {
# sample 100 random polling stations 1,000 times
sample_station <- sample(1:stations, size=50,prob=station_rates)
turn_est <- mean(pop_turnout$turnout[pop_turnout$station %in% sample_station])
return(tibble(mean_est=turn_est,
experiment=i))
}) %>% bind_rows %>%
mutate(Turnout=t)
station_rates
stations
station_rates <- rbeta(n=length(stations),t*20,(1-t)*20)
# sample 100 random polling stations 1,000 times
sample_station <- sample(1:stations, size=50,prob=station_rates)
length(station_rates)
station_rates <- rbeta(n=stations,t*20,(1-t)*20)
# sample 100 random polling stations 1,000 times
sample_station <- sample(1:stations, size=50,prob=station_rates)
sample_station
# loop over turnout, sample polls, estimate turnout
over_turnout <- parallel::mclapply(seq(.05,.5,by=.1), function(t) {
# polling station varying turnout rates
station_rates <- rbeta(n=stations,t*20,(1-t)*20)
# randomly let voters decide to vote depending on true station-level turnout rate
pop_turnout <- lapply(1:stations, function(s) {
tibble(turnout=rbinom(n=sum(vote_assign==s), size=1,prob =
station_rates[s]),
station=s)
}) %>% bind_rows
over_samples <- lapply(1:1000, function(i) {
# sample 100 random polling stations 1,000 times
sample_station <- sample(1:stations, size=50,prob=station_rates)
turn_est <- mean(pop_turnout$turnout[pop_turnout$station %in% sample_station])
return(tibble(mean_est=turn_est,
experiment=i))
}) %>% bind_rows %>%
mutate(Turnout=t)
over_samples
},mc.cores=10) %>%
bind_rows
over_turnout %>%
ggplot(aes(y=mean_est,x=Turnout)) +
stat_summary(fun.data=mean_cl_boot) +
geom_abline(slope=1,intercept=0,linetype=2,colour="red") +
theme_tufte() +
theme(text=element_text(family="")) +
labs(y="Estimated Turnout",x="True Turnout",
caption=stringr::str_wrap("Comparison of Mourakiboun estimated (y axis) versus actual turnout (x axis). Red line shows where true and estimated values are equal. Based on biased samples of 50 polling stations with higher turnout stations more likely to be sampled. However, simulation assumes no problems with recording votes.")) +
scale_x_continuous(labels=scales::percent_format) +
scale_y_continuous(labels=scales::percent_format)
View(over_turnout)
over_turnout_biased %>%
ggplot(aes(y=mean_est,x=Turnout)) +
stat_summary(fun.data=mean_cl_boot) +
geom_abline(slope=1,intercept=0,linetype=2,colour="red") +
theme_tufte() +
theme(text=element_text(family="")) +
labs(y="Estimated Turnout",x="True Turnout",
caption=stringr::str_wrap("Comparison of Mourakiboun estimated (y axis) versus actual turnout (x axis). Red line shows where true and estimated values are equal. Based on biased samples of 50 polling stations with higher turnout stations more likely to be sampled. However, simulation assumes no problems with recording votes."))
over_turnout_biased <- over_turnout
over_turnout_biased %>%
ggplot(aes(y=mean_est,x=Turnout)) +
stat_summary(fun.data=mean_cl_boot) +
geom_abline(slope=1,intercept=0,linetype=2,colour="red") +
theme_tufte() +
theme(text=element_text(family="")) +
labs(y="Estimated Turnout",x="True Turnout",
caption=stringr::str_wrap("Comparison of Mourakiboun estimated (y axis) versus actual turnout (x axis). Red line shows where true and estimated values are equal. Based on biased samples of 50 polling stations with higher turnout stations more likely to be sampled. However, simulation assumes no problems with recording votes."))
over_turnout_biased %>%
ggplot(aes(y=mean_est,x=Turnout)) +
stat_summary(fun.data=mean_cl_boot) +
geom_abline(slope=1,intercept=0,linetype=2,colour="red") +
theme_tufte() +
theme(text=element_text(family="")) +
labs(y="Estimated Turnout",x="True Turnout",
caption=stringr::str_wrap("Comparison of Mourakiboun estimated (y axis) versus actual turnout (x axis). Red line shows where true and estimated values are equal. Based on biased samples of 50 polling stations with higher turnout stations more likely to be sampled. However, simulation assumes no problems with recording votes.")) +
ylim(c(0,0.5)) +
xlim(c(0,0.5))
over_turnout_biased %>%
group_by(Turnout) %>%
summarize(pop_est=mean(mean_est),
low_est=quantile(mean_est,.05),
high_est=quantile(mean_est, .95)) %>%
ggplot(aes(y=pop_est,x=Turnout)) +
geom_pointrange(aes(ymin=low_est,
ymax=high_est),size=.5,fatten=1) +
geom_abline(slope=1,intercept=0,linetype=2,colour="red") +
theme_tufte() +
theme(text=element_text(family="")) +
labs(y="Estimated Turnout",x="True Turnout",
caption=stringr::str_wrap("Comparison of Mourakiboun estimated (y axis) versus actual turnout (x axis). Red line shows where true and estimated values are equal. Based on biased samples of 50 polling stations with higher turnout stations more likely to be sampled. However, simulation assumes no problems with recording votes.")) +
ylim(c(0,0.5)) +
xlim(c(0,0.5))
blogdown::build_site(build_rmd="content/post/tunisia_polls.Rmd")
blogdown::build_site(build_rmd="content/post/tunisia_polls.Rmd")
blogdown::build_site(build_rmd="content/post/tunisia_polls.Rmd")
blogdown::build_site(build_rmd="content/post/tunisia_polls.Rmd")
blogdown::build_site(build_rmd="content/post/tunisia_polls.Rmd")
blogdown::build_site(build_rmd="content/post/tunisia_polls.Rmd")
blogdown::build_site(build_rmd="content/post/tunisia_polls.Rmd")
install.packages(c("blogdown", "rmarkdown"))
install.packages("rcrossref")
#| echo: false
#| label: crossref
library(rcrossref)
?`rcrossref-package`
#| echo: false
#| label: crossref
library(rcrossref)
ordbetareg_cite_count <- cr_citation_count(doi="10.1017/pan.2022.20",
key="bobkubinec@gmail.com")
?lubridate::today
?lubridate::stamp
1.81e9/1000
1.81e9 / 1e9
cranlogs::cran_downloads("ordbetareg","last-month")
cranlogs::cran_downloads("ordbetareg","last-month")
cranlogs::cran_downloads("ordbetareg","last-month")
cranlogs::cran_downloads("ordbetareg","last-month")
cranlogs::cran_downloads("ordbetareg","last-month")
cranlogs::cran_downloads("ordbetareg","last-month")
cranlogs::cran_downloads("ordbetareg","last-month")
cranlogs::cran_downloads("ordbetareg","last-month")
cranlogs::cran_downloads("ordbetareg","last-month")
