"Stay at Home At Risk Only" = "stay_statusMandatory - at-risk people only",
"Tests" = "scale(test_prop)",
"Trump Vote" = "vote_share"
)) %>%
ggplot(aes(y=Estimate,x=reorder(stringr::str_wrap(Variables,width = 25),Estimate))) +
geom_pointrange(aes(ymin=Estimate - 1.96*`Std. Error`,
ymax=Estimate + 1.96*`Std. Error`)) +
geom_text(aes(label=round(Estimate,digits=2)),
size=2.5,vjust=-.75) +
theme_tufte() +
geom_vline(xintercept=0,linetype=2) +
scale_colour_viridis_d() +
scale_y_continuous(labels=scales::percent_format(scale=1)) +
coord_flip() +
labs(y="Comparison Period",x="Percentage Change in Daily COVID-19 Cases") +
ggtitle(stringr::str_wrap("Trump Vote Share Interaction with Mask Mandates",width = 60))
d1_part_between$coeftable %>%
mutate(Variables=row.names(d1_part_between$coeftable),
Variables=forcats::fct_recode(Variables,
"Ban on >10 Gatherings" = "ban_gather",
"Bars Curbside Only" = "bar_orderCurbside/delivery only",
"No Bar Restrictions" = "bar_orderNo restriction found",
"Bars Open with Limitations" = "bar_orderOpen with limitations",
"Mask Mandate" = "mask_statusPublic Mask Mandate",
"Mask Mandate X Trump Vote" = "mask_statusPublic Mask Mandate:vote_share",
"Median Income" = "scale(median_income)",
"% Foreign" = "prop_foreign",
"Restaurant Curbside Only" = "rest_actionCurbside/carryout/delivery only",
"Restaurant Open with Precautions" = "rest_actionOpen with social distancing/reduced seating/enhanced sanitation",
"Stay at Home Advisory" = "stay_statusAdvisory/Recommendation",
"Stay at Home Mandatory" = "stay_statusMandatory - all people",
"Stay at Home Certain Areas" = "stay_statusMandatory - all people in certain areas of state",
"Stay at Home At-risk Certain Areas" = "stay_statusMandatory - at-risk in certain areas of state",
"Stay at Home At Risk Only" = "stay_statusMandatory - at-risk people only",
"Tests" = "scale(test_prop)",
"Trump Vote" = "vote_share"
)) %>%
ggplot(aes(y=Estimate,x=reorder(stringr::str_wrap(Variables,width = 25),Estimate))) +
geom_pointrange(aes(ymin=Estimate - 1.96*`Std. Error`,
ymax=Estimate + 1.96*`Std. Error`)) +
geom_text(aes(label=round(Estimate,digits=2)),
size=2.5,vjust=-.75) +
theme_tufte() +
geom_vline(xintercept=0,linetype=2) +
scale_colour_viridis_d() +
scale_y_continuous(labels=scales::percent_format(scale=1)) +
coord_flip() +
labs(y="Comparison Period",x="Percentage Change in Daily COVID-19 Cases") +
ggtitle(stringr::str_wrap("Trump Vote Share Interaction with Mask Mandates",width = 60))
?geom_pointrange
d1_part_between$coeftable %>%
mutate(Variables=row.names(d1_part_between$coeftable),
Variables=forcats::fct_recode(Variables,
"Ban on >10 Gatherings" = "ban_gather",
"Bars Curbside Only" = "bar_orderCurbside/delivery only",
"No Bar Restrictions" = "bar_orderNo restriction found",
"Bars Open with Limitations" = "bar_orderOpen with limitations",
"Mask Mandate" = "mask_statusPublic Mask Mandate",
"Mask Mandate X Trump Vote" = "mask_statusPublic Mask Mandate:vote_share",
"Median Income" = "scale(median_income)",
"% Foreign" = "prop_foreign",
"Restaurant Curbside Only" = "rest_actionCurbside/carryout/delivery only",
"Restaurant Open with Precautions" = "rest_actionOpen with social distancing/reduced seating/enhanced sanitation",
"Stay at Home Advisory" = "stay_statusAdvisory/Recommendation",
"Stay at Home Mandatory" = "stay_statusMandatory - all people",
"Stay at Home Certain Areas" = "stay_statusMandatory - all people in certain areas of state",
"Stay at Home At-risk Certain Areas" = "stay_statusMandatory - at-risk in certain areas of state",
"Stay at Home At Risk Only" = "stay_statusMandatory - at-risk people only",
"Tests" = "scale(test_prop)",
"Trump Vote" = "vote_share"
)) %>%
ggplot(aes(y=Estimate,x=reorder(stringr::str_wrap(Variables,width = 25),Estimate))) +
geom_pointrange(aes(ymin=Estimate - 1.96*`Std. Error`,
ymax=Estimate + 1.96*`Std. Error`),fatten=2,alpha=0.8) +
geom_text(aes(label=round(Estimate,digits=2)),
size=2.5,vjust=-.75) +
theme_tufte() +
geom_vline(xintercept=0,linetype=2) +
scale_colour_viridis_d() +
scale_y_continuous(labels=scales::percent_format(scale=1)) +
coord_flip() +
labs(y="Comparison Period",x="Percentage Change in Daily COVID-19 Cases") +
ggtitle(stringr::str_wrap("Trump Vote Share Interaction with Mask Mandates",width = 60))
d1_part_between$coeftable %>%
mutate(Variables=row.names(d1_part_between$coeftable),
Variables=forcats::fct_recode(Variables,
"Ban on >10 Gatherings" = "ban_gather",
"Bars Curbside Only" = "bar_orderCurbside/delivery only",
"No Bar Restrictions" = "bar_orderNo restriction found",
"Bars Open with Limitations" = "bar_orderOpen with limitations",
"Mask Mandate" = "mask_statusPublic Mask Mandate",
"Mask Mandate X Trump Vote" = "mask_statusPublic Mask Mandate:vote_share",
"Median Income" = "scale(median_income)",
"% Foreign" = "prop_foreign",
"Restaurant Curbside Only" = "rest_actionCurbside/carryout/delivery only",
"Restaurant Open with Precautions" = "rest_actionOpen with social distancing/reduced seating/enhanced sanitation",
"Stay at Home Advisory" = "stay_statusAdvisory/Recommendation",
"Stay at Home Mandatory" = "stay_statusMandatory - all people",
"Stay at Home Certain Areas" = "stay_statusMandatory - all people in certain areas of state",
"Stay at Home At-risk Certain Areas" = "stay_statusMandatory - at-risk in certain areas of state",
"Stay at Home At Risk Only" = "stay_statusMandatory - at-risk people only",
"Tests" = "scale(test_prop)",
"Trump Vote" = "vote_share"
)) %>%
ggplot(aes(y=Estimate,x=reorder(stringr::str_wrap(Variables,width = 40),Estimate))) +
geom_pointrange(aes(ymin=Estimate - 1.96*`Std. Error`,
ymax=Estimate + 1.96*`Std. Error`),fatten=2,alpha=0.8) +
geom_text(aes(label=round(Estimate,digits=2)),
size=2.5,vjust=-.75) +
theme_tufte() +
geom_vline(xintercept=0,linetype=2) +
scale_colour_viridis_d() +
scale_y_continuous(labels=scales::percent_format(scale=1)) +
coord_flip() +
labs(y="Comparison Period",x="Percentage Change in Daily COVID-19 Cases") +
ggtitle(stringr::str_wrap("Trump Vote Share Interaction with Mask Mandates",width = 60))
bind_rows(all_coefs_within,
all_coefs_between,filter(all_coefs,Type=="Replication")) %>%
ggplot(aes(y=Estimate,x=Model)) +
geom_pointrange(aes(ymin=lb,ymax=upb,colour=Type),
position=position_dodge(width=.8),
fatten=2) +
geom_text(aes(label=round(Estimate,digits=2),group=Type),
position=position_dodge(width=.8),
size=2.5,vjust=-.75,fontface="bold") +
theme_tufte() +
geom_vline(xintercept=0,linetype=2) +
scale_colour_viridis_d() +
scale_y_continuous(labels=scales::percent_format(scale=1)) +
coord_flip() +
labs(y="Comparison Period",x="Percentage Change in Daily COVID-19 Cases") +
ggtitle(stringr::str_wrap("Comparison of Mask Mandates Effects both Within-County Over-time and Daily Cross-sections",width = 60))
bind_rows(all_coefs_within,
all_coefs_between,filter(all_coefs,Type=="Replication")) %>%
ggplot(aes(y=Estimate,x=Model)) +
geom_pointrange(aes(ymin=lb,ymax=upb,colour=Type),
position=position_dodge(width=.8),
fatten=2) +
geom_text(aes(label=round(Estimate,digits=2),group=Type),
position=position_dodge(width=.8),
size=2.5,vjust=-.75,fontface="bold") +
theme_tufte() +
geom_vline(xintercept=0,linetype=2) +
scale_colour_viridis_d() +
geom_vline(xintercept=0,linetype=2) +
scale_y_continuous(labels=scales::percent_format(scale=1)) +
coord_flip() +
labs(y="Comparison Period",x="Percentage Change in Daily COVID-19 Cases") +
ggtitle(stringr::str_wrap("Comparison of Mask Mandates Effects both Within-County Over-time and Daily Cross-sections",width = 60))
bind_rows(all_coefs_within,
all_coefs_between,filter(all_coefs,Type=="Replication")) %>%
ggplot(aes(y=Estimate,x=Model)) +
geom_pointrange(aes(ymin=lb,ymax=upb,colour=Type),
position=position_dodge(width=.8),
fatten=2) +
geom_text(aes(label=round(Estimate,digits=2),group=Type),
position=position_dodge(width=.8),
size=2.5,vjust=-.75,fontface="bold") +
theme_tufte() +
geom_vline(xintercept=0,linetype=2) +
scale_colour_viridis_d() +
geom_hline(yintercept=0,linetype=2) +
scale_y_continuous(labels=scales::percent_format(scale=1)) +
coord_flip() +
labs(y="Comparison Period",x="Percentage Change in Daily COVID-19 Cases") +
ggtitle(stringr::str_wrap("Comparison of Mask Mandates Effects both Within-County Over-time and Daily Cross-sections",width = 60))
all_coefs %>%
ggplot(aes(y=Estimate,x=Model)) +
geom_pointrange(aes(ymin=lb,ymax=upb,colour=Type),
position=position_dodge(width=0.5),
fatten=2) +
geom_text(aes(label=round(Estimate,digits=2),group=Type),
position=position_dodge(width=0.5),
size=3,vjust=-.75) +
geom_hline(yintercept=0,linetype=2) +
theme_tufte() +
geom_vline(xintercept=0,linetype=2) +
scale_colour_viridis_d() +
coord_flip() +
scale_y_continuous(labels=scales::percent_format(scale=1)) +
labs(y="Comparison Period",x="Percentage Change in Daily COVID-19 Cases") +
ggtitle("Replication of CDC Mask Results with Open Source Data")
blogdown::build_site(build_rmd="content/post/cdc_fe.Rmd")
blogdown::build_site(build_rmd="content/post/cdc_fe.Rmd")
blogdown::build_site(build_rmd="content/post/cdc_fe.Rmd")
blogdown::build_site(build_rmd="content/post/cdc_fe.Rmd")
require(dplyr)
require(tidyr)
require(ggplot2)
require(ggthemes)
require(readr)
require(tidycensus)
require(lubridate)
#require(plm)
set.seed(1062021)
knitr::opts_chunk$set(warning=FALSE,message=FALSE,echo=TRUE,fig.align = "center")
knitr::include_graphics("baddag.jpeg")
tinytex::install_tinytex()
require(dplyr)
require(tidyr)
require(ggplot2)
require(ggthemes)
require(readr)
require(tidycensus)
require(lubridate)
#require(plm)
set.seed(1062021)
if(knitr::is_latex_output()) {
tikz_fig <- 'pdf'
} else if(knitr::is_html_output()) {
tikz_fig <- 'svg'
} else {
tikz_fig <- 'svg'
}
knitr::opts_chunk$set(warning=FALSE,message=FALSE,echo=TRUE,fig.align = "center",echo=FALSE)
require(ggdag)
?ggdag::dag
knitr::include_graphics("figure/panel1.png")
knitr::include_graphics("figure/panel2.png")
blogdown::serve_site()
knitr::include_graphics("figure/panel1.png")
knitr::include_graphics("figure/panel2.png")
blogdown::build_site()
knitr::opts_chunk$set(echo = TRUE)
require(dplyr)
require(tidyr)
require(ggplot2)
require(eivtools)
require(brms)
require(kableExtra)
require(readr)
require(lubridate)
require(stringr)
set.seed(662817)
knitr::opts_chunk$set(warning=F,message=F,fig.align = "center")
run_model <- T
mobility <- readRDS("data/gmob.rds") %>%
filter(is.na(sub_region_1), is.na(sub_region_2), is.na(metro_area)) %>%
select(country,date_policy="date",
retail="retail_and_recreation_percent_change_from_baseline")
indices <- read_csv("https://drive.google.com/uc?export=download&id=1dMCTVPrf-tJyhv_uxr0yAQO-Elx0QOCG")
indicators <- read_csv("https://drive.google.com/uc?id=1lorcowHNnF0Vl6pxBjMdjTC4yPhHBLJI&export=download")
indicators %>%
filter(date_policy>ymd("2020-04-01"),
date_policy<ymd("2020-04-07"),
country=="Afghanistan") %>%
select(country,date_policy,social_distance,mask_everywhere,primary_school) %>%
knitr::kable() %>%
kable_styling()
indices %>%
filter(date_policy==ymd("2020-04-01"),
country=="Afghanistan") %>%
knitr::kable() %>%
kable_styling()
index_med <- select(indices,country,date_policy,med_est,modtype) %>%
spread(key="modtype",value="med_est")
index_sds <- select(indices,country,date_policy,sd_est,modtype) %>%
spread(key="modtype",value="sd_est")
# need to adjust names so that we can bind by column
names(index_med)[3:8] <- paste0(names(index_med)[3:8],"_med") %>%
str_replace(" ","_")
names(index_sds)[3:8] <- paste0(names(index_sds)[3:8],"_sd") %>%
str_replace(" ","_")
# merge back together
index_combined <- left_join(index_med,index_sds,by=c("country","date_policy"))
# we only have index values through Jan 16th, 2021
mobility <- left_join(mobility,index_combined,by=c("country","date_policy")) %>%
filter(!is.na(Social_Distancing_sd))
mobility <- filter(mobility, country %in% c("United States",
"Brazil","China",
"United Kingdom",
"France",
"South Africa","Nigeria",
"Indonesia",
"Australia","Thailand"))
# first create Sigma, the covariance matrix
# only has a diagonal value as we don't have covariance estimates across indices
Sigma <- diag(c(mean(mobility$`Business_Restrictions_sd`,na.rm=T),
mean(mobility$`Health_Monitoring_sd`,na.rm=T),
mean(mobility$`Health_Resources_sd`,na.rm=T),
mean(mobility$`Mask_Policies_sd`,na.rm=T),
mean(mobility$`School_Restrictions_sd`,na.rm=T),
mean(mobility$`Social_Distancing_sd`,na.rm=T)))
# add dimnames to identify each variables
dimnames(Sigma) <- list(c("Business_Restrictions_med",
"Health_Monitoring_med",
"Health_Resources_med",
"Mask_Policies_med",
"School_Restrictions_med",
"Social_Distancing_med"),
c("Business_Restrictions_med",
"Health_Monitoring_med",
"Health_Resources_med",
"Mask_Policies_med",
"School_Restrictions_med",
"Social_Distancing_med"))
retail_eiv <- eivreg(retail~Business_Restrictions_med +
Health_Monitoring_med +
Health_Resources_med +
Mask_Policies_med +
School_Restrictions_med +
Social_Distancing_med,
data=mobility,Sigma_error=Sigma)
summary(retail_eiv)
# read from disk as this can take a while to run
if(run_model) {
# turn off correlations among latent variables to match what we gave
# eivreg
brms_formula <- bf(retail ~
me(Business_Restrictions_med,Business_Restrictions_sd) +
me(Health_Monitoring_med,Health_Monitoring_sd) +
me(Health_Resources_med,Health_Resources_sd) +
me(Mask_Policies_med,Mask_Policies_sd) +
me(School_Restrictions_med,School_Restrictions_sd) +
me(Social_Distancing_med,Social_Distancing_sd),
center=TRUE) +
set_mecor(FALSE)
brms_est <- brm(brms_formula,
data=mobility,
silent=0,
chains=1,save_pars = save_pars(),
iter=500,
warmup=250,
backend='rstan')
saveRDS(brms_est,"data/brms_est.rds")
} else {
brms_est <- readRDS("data/brms_est.rds")
}
saveRDS(brms_est,"data/brms_est.rds")
summary(brms_est)
coef(retail_eiv)
coef(brms_est)
fixef(brms_est)
ixef(brms_est)$Estimate[7]
fixef(brms_est)$Estimate[7]
fixef(brms_est)[7,'Estimate']
c1 <- summary(retail_eiv)
c1$coefficients
lm_est <- lm(retail~Business_Restrictions_med +
Health_Monitoring_med +
Health_Resources_med +
Mask_Policies_med +
School_Restrictions_med +
Social_Distancing_med,
data=mobility)
summary(lm_est)
summary(brms_est)
c1 <- summary(brms_est)
c1$fixed
saveRDS(brms_est,"data/brms_est.rds")
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site(build_rmd = "content/post/err_in_vars.Rmd")
blogdown::serve_site()
?blogdown::serve_site
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
?blogdown::build_site
blogdown::hugo_build()
blogdown::serve_site()
?blogdown::build_site
blogdown::stop_server()
blogdown::check_site()
blogdown::edit_draft(c(
"content/privacy.md",
"content/terms.md"
))
Use blogdown::config_Rprofile()
blogdown::config_Rprofile()
blogdown::config_netlify()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site(build_rmd = "content/post/err_in_vars.Rmd")
blogdown::build_site(build_rmd = "content/post/err_in_vars.Rmd")
blogdown::build_site(build_rmd = "content/post/err_in_vars.Rmd")
blogdown::build_site(build_rmd = "content/post/err_in_vars.Rmd")
blogdown::build_site(build_rmd = "content/post/err_in_vars.Rmd")
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::serve_site()
blogdown::stop_server()
knitr::opts_chunk$set(echo = TRUE)
require(dplyr)
require(tidyr)
require(ggplot2)
require(eivtools)
require(brms)
require(kableExtra)
require(readr)
require(lubridate)
require(stringr)
set.seed(662817)
knitr::opts_chunk$set(warning=F,message=F,fig.align = "center")
run_model <- F
mobility <- readRDS("data/gmob.rds") %>%
filter(is.na(sub_region_1), is.na(sub_region_2), is.na(metro_area)) %>%
select(country,date_policy="date",
retail="retail_and_recreation_percent_change_from_baseline")
indices <- read_csv("https://drive.google.com/uc?export=download&id=1dMCTVPrf-tJyhv_uxr0yAQO-Elx0QOCG")
indicators <- read_csv("https://drive.google.com/uc?id=1lorcowHNnF0Vl6pxBjMdjTC4yPhHBLJI&export=download")
indicators %>%
filter(date_policy>ymd("2020-04-01"),
date_policy<ymd("2020-04-07"),
country=="Afghanistan") %>%
select(country,date_policy,social_distance,mask_everywhere,primary_school) %>%
knitr::kable() %>%
kable_styling()
indices %>%
filter(date_policy==ymd("2020-04-01"),
country=="Afghanistan") %>%
knitr::kable() %>%
kable_styling()
index_med <- select(indices,country,date_policy,med_est,modtype) %>%
spread(key="modtype",value="med_est")
index_sds <- select(indices,country,date_policy,sd_est,modtype) %>%
spread(key="modtype",value="sd_est")
# need to adjust names so that we can bind by column
names(index_med)[3:8] <- paste0(names(index_med)[3:8],"_med") %>%
str_replace(" ","_")
names(index_sds)[3:8] <- paste0(names(index_sds)[3:8],"_sd") %>%
str_replace(" ","_")
# merge back together
index_combined <- left_join(index_med,index_sds,by=c("country","date_policy"))
# we only have index values through Jan 16th, 2021
mobility <- left_join(mobility,index_combined,by=c("country","date_policy")) %>%
filter(!is.na(Social_Distancing_sd))
mobility <- filter(mobility, country %in% c("United States",
"Brazil","China",
"United Kingdom",
"France",
"South Africa","Nigeria",
"Indonesia",
"Australia","Thailand"))
# first create Sigma, the covariance matrix
# only has a diagonal value as we don't have covariance estimates across indices
# we have to square them first as Sigma is a covariance matrix and we have standard deviations (variance = SD^2)
Sigma <- diag(c(mean(mobility$`Business_Restrictions_sd`^2,na.rm=T),
mean(mobility$`Health_Monitoring_sd`^2,na.rm=T),
mean(mobility$`Health_Resources_sd`^2,na.rm=T),
mean(mobility$`Mask_Policies_sd`^2,na.rm=T),
mean(mobility$`School_Restrictions_sd`^2,na.rm=T),
mean(mobility$`Social_Distancing_sd`^2,na.rm=T)))
# add dimnames to identify each variables
dimnames(Sigma) <- list(c("Business_Restrictions_med",
"Health_Monitoring_med",
"Health_Resources_med",
"Mask_Policies_med",
"School_Restrictions_med",
"Social_Distancing_med"),
c("Business_Restrictions_med",
"Health_Monitoring_med",
"Health_Resources_med",
"Mask_Policies_med",
"School_Restrictions_med",
"Social_Distancing_med"))
retail_eiv <- eivreg(retail~Business_Restrictions_med +
Health_Monitoring_med +
Health_Resources_med +
Mask_Policies_med +
School_Restrictions_med +
Social_Distancing_med,
data=mobility,Sigma_error=Sigma)
summary(retail_eiv)
blogdown::build_site()
?blogdown::build_site
options(blogdown.files_filter = blogdown::filter_md5sum)
knitr::opts_chunk$set(echo = TRUE)
require(dplyr)
require(tidyr)
require(ggplot2)
require(eivtools)
require(brms)
require(kableExtra)
require(readr)
require(lubridate)
require(stringr)
set.seed(662817)
knitr::opts_chunk$set(warning=F,message=F,fig.align = "center")
run_model <- F
?blogdown::hugo_build
blogdown::build_site(build_rmd=T)
blogdown::build_site(build_rmd=T)
blogdown::build_site(build_rmd="content/post/err_in_vars.Rmd")
blogdown::build_site(build_rmd=T)
blogdown::build_site(build_rmd=T)
?blogdown::build_site
options(blogdown.files_filter = identity)
blogdown::build_site(build_rmd=T)
remotes::install_github("saudiwin/panelsim")
blogdown::build_site(build_rmd=T)
